{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","name","number","store","handleNameChange","event","_this","setState","target","value","handleNumberChange","handleSubmit","preventDefault","_this$state","concat","react_default","a","createElement","onSubmit","this","className","htmlFor","id","placeholder","onChange","type","map","contact","App_Display","React","Component","Display","props","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,oNACJC,MAAQ,CACNC,KAAM,GACNC,OAAQ,GACRC,MAAO,MAIXC,iBAAmB,SAACC,GAClBC,EAAKC,SAAS,CAACN,KAAMI,EAAMG,OAAOC,WAGpCC,mBAAqB,SAACL,GACpBC,EAAKC,SAAS,CAACL,OAAQG,EAAMG,OAAOC,WAGtCE,aAAe,SAACN,GACdA,EAAMO,iBADkB,IAAAC,EAEQP,EAAKN,MAA7BC,EAFgBY,EAEhBZ,KAAMC,EAFUW,EAEVX,OAAQC,EAFEU,EAEFV,MACtBG,EAAKC,SAAS,CACZJ,MAAOA,EAAMW,OAAO,CAACb,KAAMA,EAAMC,OAAQA,+EAK3C,OACEa,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKR,cACrBI,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACfL,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,QAAf,QACAN,EAAAC,EAAAC,cAAA,SAAOhB,KAAK,OAAOmB,UAAU,eAAeE,GAAG,OAAOC,YAAY,aAAad,MAAOU,KAAKnB,MAAMC,KAAMuB,SAAUL,KAAKf,oBAGtHW,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACfL,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,UAAf,UACAN,EAAAC,EAAAC,cAAA,SAAOhB,KAAK,SAASmB,UAAU,eAAeE,GAAG,SAASC,YAAY,qBAAqBd,MAAOU,KAAKnB,MAAME,OAAQsB,SAAUL,KAAKT,sBAEpIK,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAASL,UAAU,6BAAhC,WAGAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YAEXD,KAAKnB,MAAMG,OACXgB,KAAKnB,MAAMG,MAAMuB,IAAI,SAAAC,GACnB,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CAAS3B,KAAM0B,EAAQ1B,KAAMC,OAAQyB,EAAQzB,oBA7C9C2B,IAAMC,YAsDlBC,EAAU,SAAAC,GACd,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKe,EAAM/B,MACXc,EAAAC,EAAAC,cAAA,UAAKe,EAAM9B,UAkBFH,ICnEKkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.22778682.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    name: '',\n    number: '',\n    store: []\n  }\n\n \nhandleNameChange = (event) => {\n  this.setState({name: event.target.value});\n}\n\nhandleNumberChange = (event) => {\n  this.setState({number: event.target.value});\n}\n\nhandleSubmit = (event) => {\n  event.preventDefault();\n  const { name, number, store } = this.state\n  this.setState({\n    store: store.concat({name: name, number: number})\n  })\n}\n\nrender() {\n  return (\n    <div>\n\n      <form onSubmit={this.handleSubmit}>\n      <div className=\"form-group\">\n      <label htmlFor=\"name\">Name</label>\n      <input name=\"name\" className=\"form-control\" id=\"name\" placeholder=\"Enter name\" value={this.state.name} onChange={this.handleNameChange} />\n      </div>\n\n      <div className=\"form-group\">\n      <label htmlFor=\"number\">number</label>\n      <input name=\"number\" className=\"form-control\" id=\"number\" placeholder=\"Enter phone number\" value={this.state.number} onChange={this.handleNumberChange} />\n      </div>\n      <button type=\"submit\" className=\"btn btn-success btn-block\">Submit</button>\n      </form>\n\n      <div className=\"Contacts\">\n        {\n          this.state.store &&\n          this.state.store.map(contact => { \n            return <Display name={contact.name} number={contact.number} />\n          })\n        }\n      </div>\n    </div>\n  )\n}\n}\n\nconst Display = props => {\n  return (\n    <div>\n      <h1>{props.name}</h1>\n      <h2>{props.number}</h2>\n    </div>\n  )\n}\n\n// onAddItem = () => {\n//   this.setState(state => {\n//     const store = state.store.concat(state.value);\n\n//     return {\n//       store,\n//       value: '',\n//     };\n//   });\n// };\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}